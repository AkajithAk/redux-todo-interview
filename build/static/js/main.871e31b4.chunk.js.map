{"version":3,"sources":["redux/actionTypes.js","redux/reducers/notes.js","redux/reducers/inputs.js","redux/reducers/index.js","redux/createStore.js","redux/action/inputActions.js","redux/action/noteActions.js","Components/input.js","Components/noteitem.js","Components/notesection.js","App.js","index.js"],"names":["initialState","notes","id","title","content","time","combineReducers","state","action","type","actionTypes","push","note","index","forEach","i","inputs","createStore","rootReducers","InputSelection","useSelector","dispatch","useDispatch","className","placeholder","value","onChange","e","inputActions","target","class","onClick","noteActions","NoteItem","onItemClicked","NoteSection","length","map","item","App","store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.871e31b4.chunk.js","sourcesContent":["export default{\r\n    ADD_NOTE:\"ADD_NOTE\",\r\n    DELETE_NOTE:\"DELETE_NOTE\",\r\n    UPDATE_NOTE:\"UPDATE_NOTE\",\r\n    SET_INPUT_TITLE:\"SET_INPUT_TITLE\",\r\n    SET_INPUT_CONTENT:\"SET_INPUT_CONTENT\",\r\n    SET_INPUT_TIME:\"SET_INPUT_TIME\",\r\n    SET_INPUT_ID:\"SET_INPUT_ID\",\r\n    RESET_INPUT:\"RESET_INPUT\"\r\n}","import actionTypes from \"../actionTypes\"\r\n\r\nconst initialState={\r\n    notes:[]\r\n}\r\nexport default(state=initialState,action)=>{\r\n    switch(action.type){\r\n        case actionTypes.ADD_NOTE:{\r\n            const notes=[...state.notes];\r\n            notes.push(action.note)\r\n            return{\r\n                notes,\r\n            }\r\n        }\r\n        case actionTypes.UPDATE_NOTE:{\r\n            const {index,note}=action;\r\n            const notes=[...state.notes];\r\n            notes[index]=note;\r\n            return{\r\n                notes,\r\n            }\r\n        }\r\n        case actionTypes.DELETE_NOTE:{\r\n            const {index}=action;\r\n            const notes=[];\r\n            state.notes.forEach((note,i)=>{\r\n                if(index !==i){\r\n                    notes.push(note)\r\n                }\r\n            })\r\n            return{\r\n                notes, \r\n            }\r\n        }\r\n        default:return state;\r\n    }\r\n}\r\n\r\n\r\n// const newNote=action.note;\r\n//             if(notes.length > 0){\r\n//                 const latestNote=notes[notes.length-1]\r\n                \r\n//                 newNote.id=latestNote.id+1;\r\n                \r\n//             }else{\r\n//                 newNote.id+1\r\n//             }\r\n//             notes.push(newNote);","import actionTypes from \"../actionTypes\"\r\n\r\n\r\nconst initialState={\r\n    id:-1,\r\n    title:\"\",\r\n    content:\"\",\r\n    time:\"\"\r\n}\r\n\r\nexport default (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case actionTypes.SET_INPUT_TITLE:{\r\n            const {title}=action;\r\n            return{\r\n                ...state,\r\n                title,\r\n            }\r\n        }\r\n        case actionTypes.SET_INPUT_CONTENT:{\r\n            const {content}=action;\r\n            return{\r\n                ...state,\r\n                content,\r\n            }\r\n        }\r\n        case actionTypes.SET_INPUT_TIME:{\r\n            const {time}=action;\r\n            return{\r\n                ...state,\r\n                time,\r\n            }\r\n        }\r\n        case actionTypes.SET_INPUT_ID:{\r\n            const {id}=action;\r\n            return{\r\n                ...state,\r\n                id,\r\n            }\r\n        }\r\n        case actionTypes.RESET_INPUT:{\r\n            return initialState;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport notes from \"./notes\";\r\nimport inputs from \"./inputs\";\r\n\r\nexport default combineReducers({notes,inputs})\r\n","import { createStore } from \"redux\";\r\n\r\nimport rootReducers from \"./reducers\"\r\n\r\nexport default createStore(rootReducers);","import actionTypes from \"../actionTypes\";\r\n\r\n\r\nexport default{\r\n    setInputTitle:title=>({\r\n        type:actionTypes.SET_INPUT_TITLE,\r\n        title,\r\n    }),\r\n    setInputContent:content=>({\r\n        type:actionTypes.SET_INPUT_CONTENT,\r\n        content,\r\n    }),\r\n    setInputTime:time=>({\r\n        type:actionTypes.SET_INPUT_TIME,\r\n        time,\r\n    }),\r\n\r\n    setInputId:id=>({\r\n        type:actionTypes.SET_INPUT_ID,\r\n        id\r\n    }),\r\n\r\n    resetInputs:()=>({\r\n        type:actionTypes.RESET_INPUT,\r\n        \r\n    })\r\n}","import actionTypes from \"../actionTypes\";\r\n\r\nexport default{\r\n    addNote:(note)=>({\r\n        type:actionTypes.ADD_NOTE,\r\n        note\r\n    }),\r\n    updateNote:(index,note)=>({\r\n        type:actionTypes.UPDATE_NOTE,\r\n        index,note\r\n    }),\r\n    deleteNote:(index)=>({\r\n        type:actionTypes.DELETE_NOTE,\r\n        index\r\n    }),\r\n} ","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport inputActions from \"../redux/action/inputActions\";\r\nimport noteActions from \"../redux/action/noteActions\";\r\nimport \"./input.css\";\r\n \r\n\r\nconst InputSelection = () => {\r\n  const id=useSelector(state=>state.inputs.id);\r\n  const title=useSelector(state=>state.inputs.title);\r\n  const content=useSelector(state=>state.inputs.content);\r\n  const time=useSelector(state=>state.inputs.time);\r\n  const dispatch=useDispatch();\r\n\r\n\r\n  const addNote=()=>{\r\n    if(title&&content&&time){\r\n      dispatch(noteActions.addNote({\r\n        title,\r\n        content,time\r\n      }))\r\n      dispatch(inputActions.resetInputs())\r\n    }\r\n  }\r\n\r\n  const updateNote = () => {\r\n    if(title && content) {\r\n      dispatch(noteActions.updateNote(id, {\r\n        title, content,time\r\n      }))\r\n      dispatch(inputActions.resetInputs())\r\n    }    \r\n  }\r\n  // const updateNote=()=>{\r\n  //   if(title&&content){\r\n  //     dispatch(noteActions.updateNote({\r\n  //       title,\r\n  //       content\r\n  //     }))\r\n  //     dispatch(inputActions.resetInputs())\r\n  //   }\r\n  // }\r\n \r\n   const deleteNote = () => {\r\n    dispatch(noteActions.deleteNote(id))\r\n    dispatch(inputActions.resetInputs())\r\n  }\r\n  return (\r\n    <div>\r\n  <div className=\"inputs\">\r\n  \r\n\r\n    <input type=\"text\"  placeholder=\"title\" value={title} onChange={e=>dispatch(inputActions.setInputTitle(e.target.value))} className=\"titles\"/>\r\n    </div>\r\n    \r\n    {/* <input type=\"text\"  placeholder=\"date\" value={content} onChange={e=>dispatch(inputActions.setInputContent(e.target.value))} className=\"dates\"/> */}\r\n    {/* <input type=\"text\"  placeholder=\"time\" value={time} onChange={e=>dispatch(inputActions.setInputTime(e.target.value))} className=\"times\"/> */}\r\n    {/* <input class=\"datepicker\" data-date-format=\"mm/dd/yyyy\"  /> */}\r\n \r\n    <div class=\"md-form md-outline input-with-post-icon datepicker dateandtimeandbtn\">\r\n  <input placeholder=\"Select date\" type=\"date\" id=\"example\" class=\"form-control\" value={content} onChange={e=>dispatch(inputActions.setInputContent(e.target.value))} className=\"dates\"/>\r\n   \r\n</div> \r\n\r\n    <div class=\"md-form mx-5 my-5 dateandtimeandbtn\"> \r\n  <input type=\"time\" id=\"inputMDEx1\" class=\"form-control\" value={time} onChange={e=>dispatch(inputActions.setInputTime(e.target.value))} className=\"times\"/>\r\n  \r\n</div>\r\n   <div className=\"inputs dateandtimeandbtn\">\r\n   <button onClick={id===-1? addNote:updateNote} className=\"buttons\">{id===-1 ?\"Add\":\"Update\"}</button>\r\n   <br/>\r\n    {\r\n      id !==-1&&\r\n      <button onClick={deleteNote} className=\"deleteBtn\">Delete</button>\r\n    }\r\n    </div>\r\n \r\n  </div>);\r\n\r\n};\r\n\r\nexport default InputSelection;\r\n","import React from 'react';\r\nimport './noteitem.css';\r\nconst NoteItem=({title,content,time,onItemClicked})=>{\r\n    return(\r\n        <div className=\"containernotes\">\r\n            <h1>{title}</h1>\r\n            <h2>{content}</h2>\r\n            <h2>{time}</h2>\r\n            <button onClick={onItemClicked} className=\"update\">Update</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteItem;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport inputActions from '../redux/action/inputActions';\r\nimport NoteItem from './noteitem';\r\n\r\nimport './notesection.css';\r\n\r\nconst NoteSection=()=>{\r\n    const dispatch=useDispatch();\r\n    const notes=useSelector(state=>state.notes.notes)\r\n\r\n    if(notes.length===0){\r\n         return(\r\n             <hi1>Empty</hi1>\r\n         )\r\n    }\r\n\r\n    const onItemClicked=(item,index)=>{\r\n       dispatch(inputActions.setInputId(index))\r\n       dispatch(inputActions.setInputTitle(item.title))\r\n       dispatch(inputActions.setInputContent(item.content))\r\n       dispatch(inputActions.setInputTime(item.time))\r\n    }\r\n    return(\r\n        <div >\r\n          {\r\n              notes.map((item,index)=>\r\n              {\r\n                  if(item){\r\n                    return (\r\n                        <NoteItem title={item.title} \r\n                content={item.content}\r\n                time={item.time}\r\n                onItemClicked={()=>{onItemClicked(item,index)}}\r\n                />\r\n                    )\r\n                  }\r\n                  return null;\r\n              })\r\n          } \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteSection;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/createStore\";\nimport './App.css';\nimport InputSelection from \"./Components/input\"\nimport NoteSection from './Components/notesection';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n       <div className=\"container\">\n         <h1>ToDo</h1>\n         <InputSelection/>\n         <br/>\n         <NoteSection/>\n       </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; \n\nReactDOM.render( \n    <App /> ,\n  document.getElementById('root')\n);\n \n"],"sourceRoot":""}